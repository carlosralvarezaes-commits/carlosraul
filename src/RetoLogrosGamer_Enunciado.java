import static java.lang.Math.max; public class RetoLogrosGamer_Enunciado {


    public static void main(String[] args) {


        // ============================================================

        // RETO FINAL ‚Äì Mini sistema de logros (multijuego)

        // ============================================================

        // OBJETIVO:

        // Implementa un sistema que, a partir de estad√≠sticas de una partida,

        // calcule y muestre los LOGROS desbloqueados por el jugador.

        //

        // ------------------------------------------------------------

        // 1) DECLARA ESTAS VARIABLES DE ENTRADA (asigna valores fijos para probar):

        //    - String juego: "Fortnite", "LoL", "Minecraft", "Pokemon"

        //    - int kills

        //    - int muertes

        //    - int asistencias

        //    - int tiempoMin: minutos jugados

        //    - int objetivos: (torres destruidas, bosses, capturas, construcciones‚Ä¶)

        //    - boolean desconexion: true si el jugador se desconect√≥ en mitad

        //    - int da√±oHecho

        //    - int da√±oRecibido

        //    - int oro: moneda conseguida

        //

        // ------------------------------------------------------------

        // 2) NORMAS GENERALES (usa if / else if / else y condiciones compuestas):

        //    - Si desconexion es true y tiempoMin < 5 ‚Üí imprimir:

        //         "Logro NEGATIVO: Rage Quit üò†"

        //      IMPORTANTE: si ocurre esto, NO concedas otros logros de "PRO"

        //      en la misma partida (prioridad negativa).

        //

        //    - Calcula KDA = (kills + asistencias) / max(1, muertes)

        //      (evita divisi√≥n por 0 usando Math.max).

        //

        //    - Clasificaci√≥n por KDA (elige SOLO UNA, la primera que cumpla):

        //        KDA ‚â• 5          ‚Üí "Jugador PRO"

        //        3 ‚â§ KDA < 5      ‚Üí "Jugador BUENO"

        //        1 ‚â§ KDA < 3      ‚Üí "Jugador NORMAL"

        //        KDA < 1          ‚Üí "Jugador NOOB"

        //

        //    - Logros b√°sicos independientes (pueden acumularse):

        //        kills >= 10                    ‚Üí "Logro: Cazador experto üèπ"

        //        muertes == 0 && kills >= 5     ‚Üí "Logro: Intocable üëë"

        //        tiempoMin > 60                 ‚Üí "Logro: Marat√≥n gamer ‚è±Ô∏è"

        //        da√±oHecho > da√±oRecibido*2     ‚Üí "Logro: Dominio total üí•"

        //        objetivos >= 3                 ‚Üí "Logro: Objetivos de mapa üéØ"

        //

        // ------------------------------------------------------------

        // 3) REGLAS ESPEC√çFICAS POR JUEGO (selecciona por valor de 'juego'):

        //    - Fortnite:

        //        si kills >= 15 && muertes <= 2 ‚Üí "Victoria agresiva (Fortnite) üî´"

        //        si oro >= 2000                 ‚Üí "Ahorrista de V-Bucks (Fortnite) üí∞"

        //

        //    - LoL:

        //        si objetivos >= 2 && asistencias >= 10 ‚Üí "Shotcaller (LoL) üó£Ô∏è"

        //        si da√±oHecho >= 30000 && muertes <= 3  ‚Üí "Carry principal (LoL) üõ°Ô∏è"

        //

        //    - Minecraft:

        //        si tiempoMin >= 45 && da√±oRecibido == 0 ‚Üí "Superviviente pac√≠fico (MC) üåø"

        //        si objetivos >= 5                        ‚Üí "Constructor incansable (MC) üß±"

        //

        //    - Pokemon:

        //        si kills >= 6 && da√±oRecibido <= 1000 ‚Üí "Entrenador maestro (PKMN) üß¢"

        //        si asistencias >= 3                   ‚Üí "Apoyo del equipo (PKMN) ü§ù"

        //

        // ------------------------------------------------------------

        // 4) PRIORIDADES Y EXCLUSIONES (orden y anidaci√≥n de if):

        //    - Si se activa "Rage Quit üò†", NO mostrar "Jugador PRO".

        //    - Si muertes == 0 && kills == 0 && asistencias == 0 && tiempoMin < 2:

        //        imprimir "Partida inv√°lida: AFK" y NO mostrar m√°s logros.

        //

        // ------------------------------------------------------------

        // 5) SALIDA (impresiones sugeridas):

        //    - Resumen de entrada (todas las estad√≠sticas)

        //    - KDA calculado

        //    - Rango por KDA (solo uno)

        //    - Lista de logros desbloqueados (varios posibles)

        //    - Mensajes de exclusi√≥n si corresponde (p. ej., Rage Quit / AFK)

        //

        // ------------------------------------------------------------

        // 6) PRUEBAS R√ÅPIDAS (cambia las variables y ejecuta varias veces):

        //    CASO A: LoL, kills=12, muertes=2, asist=15, tiempo=38, obj=3, desc=false, da√±oH=32000, da√±oR=9000, oro=1500

        //    CASO B: Fortnite, kills=16, muertes=2, asist=3, tiempo=25, obj=1, desc=false, da√±oH=18000, da√±oR=6000, oro=2300

        //    CASO C: Minecraft, kills=0, muertes=0, asist=0, tiempo=1, obj=0, desc=false, da√±oH=0, da√±oR=0, oro=0

        //    CASO D: Pokemon, kills=7, muertes=0, asist=4, tiempo=50, obj=2, desc=false, da√±oH=5000, da√±oR=800, oro=800

        //    CASO E: (cualquier juego), desconexion=true, tiempoMin=3

        //

        // ------------------------------------------------------------

        // 7) EXTENSIONES OPCIONALES (sube dificultad):

        //    - Suma un "score" total: +10 por logro normal, +20 por logros PRO.

        //    - Si score ‚â• 40 y no hubo Rage Quit ‚Üí "MVP de la jornada üèÜ".

        //    - Si da√±oRecibido == 0 y tiempoMin ‚â• 30 ‚Üí "Perfect Defense üß±".

        //    - Si (juego == "LoL" || juego == "Fortnite") && (kills + asistencias) ‚â• 25 ‚Üí "Impacto masivo üå™Ô∏è".

        //    - Prioriza validaciones: AFK y Rage Quit antes que el resto.

        //    - Usa if anidados para practicar flujo de decisi√≥n.

        //

        // ------------------------------------------------------------

        // PISTAS T√âCNICAS:

        //    - Usa double para KDA (decimales).

        //    - Usa Math.max(1, muertes) para evitar dividir por cero.

        //    - Estructura tu c√≥digo por bloques: validaciones iniciales ‚Üí KDA ‚Üí logros b√°sicos ‚Üí logros por juego ‚Üí extras.

        //

        // ------------------------------------------------------------

        // IMPLEMENTACI√ìN:

        //  - Escribe debajo tu soluci√≥n con muchos if/else if/else.

        //  - No uses arrays ni bucles (opcional), c√©ntrate en condiciones.

        //  - Ejecuta varias veces cambiando los valores de entrada.


        // ======= TU C√ìDIGO AQU√ç =======
        Object string;
        string = "LOL" ;


        double kills = 30;
        double assists = 15;
        double muertes = 0;
        int tiempo = 650;
        int danhohecho=30000;
        int danhorecibido = 0;
        boolean desconexion = false;
        int monedas=200000 ;
        int mision = 20;
        System system = null;
        int score= 0;
        boolean bad = ( desconexion == true && (tiempo <5));
        double calculoKDA= ((kills + assists) /max(1,muertes));





        //RQ
        if (bad == true) system.out.println("Rage Quit");


        //KDA
        if (calculoKDA >= 5 && !bad) {system.out.println("Jugador PRO");score += 50;}
        if (calculoKDA <= 1 && !bad) {system.out.println("Jugador noob"); score += 10;}
        if  (calculoKDA >=3 & calculoKDA<=4 && !bad) {system.out.println("Jugador Promedio"); score += 30;}
        if (calculoKDA >=2 & calculoKDA<3 && !bad)  {system.out.println("Jugador Decente"); score += 20;}




        //logros

        system.out.println("\nLogros:");
        if (calculoKDA >= 10 && !bad) {system.out.println("Cazador Experto"); score +=50;}
        if (muertes ==0 & kills >=5 && !bad) {system.out.println("Intocable"); score +=30;}
        if (tiempo >60 && !bad) {system.out.println ("Marat√≥n Gamer"); score +=20;}
        if (danhohecho > danhorecibido && !bad) {system.out.println("Dominio Total"); score +=10;}
        if (mision>=3 && !bad) {system.out.println("Maestro de las Misiones");score +=20;}
        if ( danhorecibido == 0 & tiempo >= 30) {system.out.println("Perfect Defense");score +=20;}







        if (muertes >= 0 && kills >= 0 && assists >= 0 && tiempo < 2) system.out.println("Partida Invalida:AFK");


        //logros Fornite
        if (string == "Fornite" )system.out.println("\nLogros Fornite:");
        if (string == "Fornite" && calculoKDA >= 25 && !bad ) {system.out.println("Logros Fornite: Impacto masivo");score +=50;}
        if (string == "Fornite" & kills >=15 & muertes <=2 && !bad) {system.out.println("Logros Fornite: Victoria Agresiva"); score +=45;}
        if (string == "Fornite" & monedas >=2000 && !bad) {system.out.println("Logros Fornite: Ahorrista de V-Bucks");score +=15;}

        //logros MC
        if (string == "Minecraft" )system.out.println("\nLogros Minecraft:");
        if (string== "Minecraft"&& tiempo>= 45 && danhorecibido == 0 && !bad ) {system.out.println("Logros Minecraft: Superviviente pac√≠fico (MC) üåø"); score +=10;}
        if (string== "Minecraft" && mision >= 2 && !bad) {system.out.println("Logros Minecraft: Constructor inalcansable (MC) üß±");score +=20;}

        //logros LOL
        if (string == "LOL" )system.out.println("\nLogros LOL:");
        if (string == "LOL" && danhohecho>=30000 && muertes<=3 && !bad) {system.out.println("Logros LOL: Carry principal (LoL) üõ°Ô∏è"); score +=40;}
        if (string =="LOL" && mision>=2 && assists>= 10 && !bad) {system.out.print("Logros LOL: Shotcaller (LoL) üó£Ô∏è");score +=20;}

        //logros Pokemon:
        if (string == "Pokemon" )system.out.println("\nLogros Pokemon:");
        if (string == "Pokemon" && kills >=6 && danhorecibido<=1000 && !bad) {system.out.println("Logros PKM: Entrenador maestro (PKMN) üß¢");score +=40;}
        if (string == "Pokemon" && assists>=3 && !bad) {system.out.print("Logros PKM: Apoyo del equipo (PKMN) ü§ù"); score +=20;}


        //clasificacion
        system.out.println("\nRango:");
        if (score >=151 & score <=350) system.out.println("Plata");
        else if (score <=150) system.out.println("Bronce");
        if (score >=351 & score <=500 ) system.out.println("Oro");
        else if (score >=501) system.out.println("Platino");



        //Estadisticas
        system.out.println("\nEstadisiticas:"+ "\nKDA:" +calculoKDA +"\nkills: "+kills+ "\nAsistencias: " +assists+ "\nMuertes: "+muertes+
                "\nDa√±o Hecho: " +danhohecho+"\nDa√±o Recibido: " + danhorecibido + "\nMisiones Completadas: "+mision + "\nScore:"+ score);

        //como podemos leer de teclado por nuestra cuenta  EJERCICIO
        //Hacer una historia con lo de la ara√±a EJERCICIO










    }
}